---
title: "HW 02"
author: "Matt Osterhoudt"
format: 
  html:
    embed-resources: true
toc: true
execute: 
  warning: false
  message: false
  error: false
---


## 0 - Setup

```{r setup}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)

if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
 pacman::p_load(tidyverse,
                palmerpenguins,
                here,
                cowgrid,
                dsbox,
                fs,
                janitor,
                scales,
                ggforce,
                glue) 
install.packages("openintro")
install.packages("ggridges")

library(openintro)
library(ggridges)

devtools::install_github("tidyverse/dsbox")

ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

knitr::opts_chunk$set(
  fig.width = 7,
  fig.asp = .618,
  fig.retina = 3,
  fig.align = "center",
  dpi = 300
)
```




## 1 - A new day, a new plot, a new geom

```{r}
#| label: Question 1

# Examination of data set
##glimpse(edibnb)

# Had to add this to purge the "NA" values
filter_edibnb <- edibnb |>
  filter(!is.na(neighbourhood), !is.na(review_scores_rating))
# This will give us the new arrangement of median review scores
median_order <- filter_edibnb |>
  group_by(neighbourhood) |>
  summarise(median_review = median(review_scores_rating, na.rm = TRUE))|>
  arrange(median_review)

# Reorders based on median levels
neighborhood_median_order <- filter_edibnb |>
  mutate(neighbourhood = factor(neighbourhood,  levels = median_order$neighbourhood))
# Plot
ggplot(neighborhood_median_order, aes(x = review_scores_rating, y = neighbourhood, fill = neighbourhood)) +
  geom_density_ridges(alpha = 0.7, scale = 1.1) +
  theme(legend.position = "none",
        plot.subtitle = element_text(color = "cornsilk4", size = 10)) + 
  labs(
    y = "Neighborhoods",
    x = "Review Score Rating",
    linetype = NULL,
    title = "Airbnb review scores of Edinburgh neighborhoods",
    subtitle = "Density Ridge Plot" ) 
 
```
Interpretation: Here is the density ridge plot, sorted by highest median review score (Morningside) to the lowest (Haymarket). As we can see, the review scores are quite close. The highest scoring neighborhoods tend to have a "taller" distribution curve, implying a tighter spread of high review scores compared to the bottom few.

## 2 - Foreign Connected PACs

```{r}
#| label: Question 2

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")


# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year")
#view(pac)

# cleanse the column names a bit and separates the country of origin/parent company into two columns
clean_pac <- clean_names(pac)|>
  separate(`country_of_origin_parent_company`, into = c("country_of_origin", "parent_company"),
           sep = "/") # I initally forgot this and some of the parent company was getting cut off!

 #view(clean_pac)

cleaner_pac <- clean_pac |>
mutate(
  year_string = str_split(year, "-", simplify = TRUE)[, 2],
  clean_year_string = str_remove(year_string, fixed(".csv")),
  year = as.integer(clean_year_string),
  repubs = as.numeric(str_remove(repubs, "\\$")),
  dems = as.numeric(str_remove(dems, "\\$"))
) |>
  select(-year_string, -clean_year_string, -total)

#glimpse(cleaner_pac)

long_cleaner_pac <- cleaner_pac |>
  pivot_longer(
    cols = c(dems, repubs),
    names_to = "party",
    values_to = "amount"
  ) |>
mutate(
  party = case_when(
    party == "dems" ~ "Democrat",
    TRUE ~ "Republican"
  )
)

#view(long_cleaner_pac)

uk_summary <- long_cleaner_pac |>
  filter(country_of_origin == "UK") |>
  group_by(year, party) |>
  summarise(total_amount = sum(amount), .groups = "drop")

#view(uk_summary)

ggplot(uk_summary, aes(x = year, y = total_amount / 1000000, color = party)) +
  geom_line(linewidth = 1.1) +
  labs(
    y = "Total amount",
    x = "Year",
    title = "Contributions to US political parties from UK-connected PACs",
    caption = "Source: OpenSecrets.org",
  ) + 
  scale_color_manual(name = "Party", values = c("Democrat" = "blue", "Republican" = "red")) +
  scale_y_continuous(labels = dollar_format(prefix = "$", suffix = "M")) + 
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0, size = 10),
    axis.title.y = element_text(hjust = 0, size = 10),
    plot.caption = element_text(size = 10),
    plot.title = element_text(size = 12)
  )
  
  

switzerland_summary <- long_cleaner_pac |>
  filter(country_of_origin == "Switzerland") |>
  group_by(year, party) |>
  summarise(total_amount = sum(amount), .groups = "drop")

#view(switzerland_summary)

ggplot(switzerland_summary, aes(x = year, y = total_amount / 1000000, color = party)) +
  geom_line(linewidth = 1.1) +
  labs(
    y = "Total amount",
    x = "Year",
    title = "Contributions to US political parties from Switzerland-connected PACs",
    caption = "Source: OpenSecrets.org",
  ) + 
  scale_color_manual(name = "Party", values = c("Democrat" = "blue", "Republican" = "red")) +
  scale_y_continuous(labels = dollar_format(prefix = "$", suffix = "M")) + 
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0, size = 10),
    axis.title.y = element_text(hjust = 0, size = 10),
    plot.caption = element_text(size = 10),
    plot.title = element_text(size = 12)
  )
```

Interpretation: I selected Switzerland as my second visual. It has a similar path of the UK one. We notice a higher level of Republican contributions at first, and we see the gap close around 2008. This visual also sees a sharp decline in republican contributions around the same time, but with a large enough drop that it matches the democrat contributions roughly in 2020.

I referred to https://search.r-project.org/CRAN/refmans/stringr/html/str_split.html and 
https://stringr.tidyverse.org/ 
This code takes the initial year column, which is a string, and splits it into two
using "-" so I can get the second year listed. Str_split will split the string into two, 
and simplify = TRUE returns the matrix. I want the second half that comes after the "-"
Afterwards, remove the .csv and convert string to integer.

I also referred to https://datavizpyr.com/dollar-format-for-axis-labels-with-ggplot2/ to figure out how to add a dollar sign on the y axis. Just a simple dollar_format function

I referred to https://www.geeksforgeeks.org/r-language/move-axis-labels-in-ggplot-in-r/ to adjust axis title.

## 3 - Median housing prices in the US

```{r}
#| label: Question 3

median_housing_data <- read_csv(here("data", "median-housing.csv"))
recessions_data <- read_csv(here("data", "recessions.csv"))

head(recessions_data)
head(median_housing_data)

colnames(median_housing_data) <- c("date", "price")

# Converts the columns to date format
median_housing_data$date <- as.Date(median_housing_data$date, format = "%Y-%m-%d")
recessions_data$Peak <- as.Date(recessions_data$Peak, format = "%Y-%m-%d")
recessions_data$Trough <- as.Date(recessions_data$Trough, format = "%Y-%m-%d")

# First Plot
ggplot(median_housing_data, aes(x = date, y = price)) + 
  geom_line(linewidth = 1.1, color = "#4285F4") +
  labs(
    y = "Dollars",
    x = NULL,
    title = "Median sales price of houses sold in the United States",
    caption = "Sources: Census; HUD",
    subtitle = "Not seasonally adjusted"
  ) + 
  scale_x_date(date_breaks = "5 years", date_labels = "%Y" ) + 
  scale_y_continuous(limits = c(0, 400000),
                     breaks = seq(0, 400000, by = 40000),
                     labels = scales::comma
  ) +
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0, size = 10),
    plot.caption = element_text(size = 10),
    plot.title = element_text(hjust = -0.5, size = 12),
    plot.subtitle = element_text(hjust = -0.22, size = 11),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank()
  )

# Set the time frame parameters
start_date <- as.Date("1963-01-01")
end_date <- as.Date("2021-12-31")

recessions_data <- recessions_data |>
  mutate(
    recession_or_not = case_when(
      Peak >= start_date & Peak <= end_date ~ TRUE,
      Trough >= start_date & Peak <= end_date ~ TRUE,
    )
  ) |>
  filter(recession_or_not == TRUE) # This is needed to filter the range

# Second Plot
ggplot(median_housing_data, aes(x = date, y = price)) + 
  geom_rect(
    data = recessions_data,
    aes(
      xmin = Peak, xmax = Trough,
      ymin = 0, ymax = Inf
    ),
    inherit.aes = FALSE, # Ignores the global setting for this layer
    fill = "gray",
    alpha = 0.3
  ) + 
  geom_line(linewidth = 1.1, color = "#4285F4") +
  labs(
    y = "Dollars",
    x = NULL,
    title = "Median sales price of houses sold in the United States",
    caption = "Shaded areas indicate U.S recessions\nSources: Census; HUD",
    subtitle = "Not seasonally adjusted"
  ) + 
  scale_x_date(date_breaks = "5 years", date_labels = "%Y" ) + 
  scale_y_continuous(limits = c(0, 400000),
                     breaks = seq(0, 400000, by = 40000),
                     labels = scales::comma
  ) +
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0, size = 10),
    plot.caption = element_text(size = 10),
    plot.title = element_text(hjust = -0.5, size = 12),
    plot.subtitle = element_text(hjust = -0.22, size = 11),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
  )

# Wrangling the data to add the year and quarter
quarter_median_housing_data <- median_housing_data |>
  mutate(
    year = year(date),
    quarter = case_when(
      month(date) %in% 1:3 ~ "Q1",
      month(date) %in% 4:6 ~ "Q2",
      month(date) %in% 7:9 ~ "Q3",
      month(date) %in% 10:12 ~ "Q4",
    ),
    year_quarter = glue("{year} {quarter}")
  )|>
  filter(year == 2019 | year == 2020) # This is needed to filter the range to 2019 and 2020

# Third Plot
ggplot(quarter_median_housing_data, aes(x = year_quarter, y = price, group = 1)) +
  geom_line(color = "#4285F4", linewidth = 1.2) +
  geom_point(fill = "white", shape = 21, stroke = .5) +
  labs(
    y = "Dollars",
    x = NULL,
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted"
  ) +
  scale_x_discrete(
    labels = c("Q1", "Q2", "Q3", "Q4", "Q1", "Q2", "Q3", "Q4"),
    expand = c(0,0) # Fits the plot to 0,0
  ) + 
  scale_y_continuous(
    labels = comma, #Adds commas to the big numbers
    breaks = seq(300000, 360000, by = 20000),
    limits = c(300000, 360000),
    expand = c(0,0) # Fits the plot to 0,0
  ) + 
  annotate(
    "text",
    x = 2.5,
    y = 300000,
    label = "2019",
    vjust = 3.5,
    size = 3,
    fontface = "plain"
  ) +
  annotate(
    "text",
    x = 6.5,
    y = 300000,
    label = "2020",
    vjust = 3.5,
    size = 3,
    fontface = "plain"
  ) +
  theme(
    axis.title.x = element_text(hjust = 0, size = 10),
    plot.title = element_text(hjust = -0.5, size = 12),
    plot.subtitle = element_text(hjust = -0.22, size = 11),
    axis.text.x = element_text(size = 8),
    plot.margin = margin(t = 5, r = 5, b = 25, l = 5, unit = "pt")
  ) + 
  coord_cartesian(ylim = c(300000, 360000), clip = "off")


```
I used https://ggplot2.tidyverse.org/reference/scale_date.html#ref-examples and https://www.statology.org/scale_x_date-in-r/ to learn the scale date method.


## 4 - Expect More. Plot More.

```{r}
#| label: Question 4

circle_data <- tribble(
  ~x0, ~y0, ~r, ~fill,
  0,     0,   300,  "#cc0000",        #outer red
  0,     0,   200,   "#ffffff",     #white
  0,     0,   100,   "#cc0000"    #inner red
) 

glimpse(circle_data)

inner_red_circle_data <- tribble(
  ~x0, ~y0, ~r, ~fill,
  0,     0,   100,   "#cc0000"    #inner red
) 

ggplot(circle_data)+
  geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = fill), color = NA) +
  scale_fill_identity() + 
  geom_circle(data = inner_red_circle_data, aes(x0 = x0, y0 = y0, r = r, fill = fill), color = NA) +
  coord_fixed(xlim = c(-350, 350), ylim = c(-400, 350)) + 
  theme_void()+
  geom_text(
    x = 0,
    y = -350 - 18,
    label = "TARGET\u00AE",
    color = "#cc0000",
    size = 12,
    fontface = "bold",
    hjust = 0.5
  )
  

```
Approach: So I figured it's just 3 circles laid on top of each other. First thing I did was pull up an image of the Target logo. I found that it was 300x300 pixels. So I used those values for my tribble radius values. The x and y axis points were easy; I simply use 0,0 and plotted right in the middle. I sort of freehand measured the distance between each circle. It seemed roughly equal, so I used increments of 100 for each circle. I was not able to figure out why, but my initial tribble's small red circle would not go on top. So I made another tribble that consisted of only the smaller circle, and laid out another geom_circle. Afterwards, I used geom_text like I have before to place the text. I looked up how to do the trademark symbol in R as well. 

Source for the hex color: https://color-hex.org/color-palettes/167
Source for the trademark idea: https://stackoverflow.com/questions/31040051/how-to-use-registered-trademark-or-special-symbols-other-than-greek-alphabets



## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?

```{r}
#| label: Question 5

view(penguins)


```

